name: Release Webhook Notification

on:
    release:
        types: [published]

jobs:
    notify-webhook:
        runs-on: ubuntu-latest
        environment: staging
        permissions:
          contents: read

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Send release notification to Strapi
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GITHUB_TOKEN }}
                script: |
                  const tag = context.ref.replace("refs/tags/", "");
                  const { data: release } = await github.rest.repos.getReleaseByTag({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag: tag
                  });
                  function cleanChangelog(changelog) {
                    if (!changelog) return '';
                    return changelog.split(/\r?\n/).reduce((acc, line) => {
                      if (line.toLowerCase().includes('new contributors')) return acc;
                      if (line.toLowerCase().includes('full changelog')) return acc;
                      line = line.replace(/by\s+@[\w-]+.*$/i, '').replace(/@\w+/g, '').replace(/\bhttps?:\/\/\S+/gi, '').trim();
                      if (line.length > 0) acc.push(line);
                      return acc;
                    }, []).join('\n');
                  }

                  const cleanedBody = cleanChangelog(release.body);
                  const payload = {
                    version: release.tag_name,
                    release_name: release.name,
                    release_url: release.html_url,
                    changelog: cleanedBody || 'No release notes provided',
                    type: 'ENTERPRISE',
                    date: release.published_at
                  };
                  try {
                    const response = await fetch(`${process.env.STRAPI_WEBHOOK_URL}/api/github-releases?status=draft`, {
                      method: 'POST',
                      headers: {
                        'Authorization': `Bearer ${process.env.STRAPI_API_TOKEN}`,
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({data: payload})
                    });

                    if (!response.ok) {
                      throw new Error(`Webhook request failed: ${response.status} ${response.statusText}`);
                    }

                    console.log('Response status:', response.status);
                  } catch (error) {
                    console.error('Failed to send webhook notification:', error);
                    core.setFailed(error.message);
                  }
              env:
                STRAPI_WEBHOOK_URL: ${{ secrets.STRAPI_WEBHOOK_URL }}
                STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}